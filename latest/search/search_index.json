{
    "docs": [
        {
            "location": "/", 
            "text": "LadeGCM Documentation\n\n\n\n\nUsage\n\n\nA decent example on what the package can do would be to recreate Figure 2 from \nLade \net al\n, which can be obtained using the package defaults.\n\n\nFirst, we load our dependencies. Here, we import csv and xlsx file readers and a plotting library alongside our module.\n\n\nusing DataFrames, CSV, XLSX\nusing PlotlyJS\nusing LadeGCM\n\n\n\n\nFor the moment, we can use this helper function to convert \nDataFrame\n's \nmissing\n to \nNaN\ns so they can plot correctly.\n\n\ng(x) = x === missing ? NaN: x;\n\n\n\n\nNOTE:\n in v0.7 we can use the following instead:\n\n\nreplace(df[col], missing=\nNaN)\n\n\n\n\n\n\nHistorical climate data used here is from \nLe Qu\u00e9r\u00e9 \net al\n. (2017)\n, and temperature data comes from \nNOAA\n.\n\n\nGCB = DataFrame(XLSX.readtable(\nGlobal_Carbon_Budget_2017v1.3.xlsx\n, \nHistorical Budget\n, first_row=15)...);\nTEMP = CSV.read(\nGlobal_temperature_1880-2018.csv\n; header=5, datarow=6);\n\n\n\n\nWith historical comparison data now ready, we can run our model for the four Representative Concentration Pathways. Pathway data is extant in the model already, so there is no need to source it externally.\n\n\nAlso, as we are replicating Figure 2 in \nLade \net al\n, we can use default settings.\n\n\n# Generate results for all pathways\nr3 = calculate(RCP3PD);\nr45 = calculate(RCP45);\nr6 = calculate(RCP6);\nr85 = calculate(RCP85);\n\n\n\n\nAll results are now in and we are almost ready to plot our reconstruction of Figure 2.\n\n\nThe only additional thing we need to look at is the NOAA temperature. NOAA data is relative to the mean of 1901-2000, so we offset it to our mean over that period to align our datasets.\n\n\ntemp_offset = mean([r3.\u0394T[1901 .\n r3.year .\n 2000]; r45.\u0394T[1901 .\n r45.year .\n 2000]; r6.\u0394T[1901 .\n r6.year .\n 2000]; r85.\u0394T[1901 .\n r85.year .\n 2000]]);\n\n\n\n\nFinally, we can plot everything\n\n\n#I'm sure this could be cleaner...\nfig2 = plot([\n        scatter(x=r3.year, y=r3.\u0394cM, hoverinfo=\ny+name\n, line_width=3, line_color=\n#e41a1c\n, name=\nRCP3PD\n),\n        scatter(x=r3.year, y=r3.\u0394c\u209c, hoverinfo=\ny+name\n, line_width=3, line_color=\n#e41a1c\n, name=\nRCP3PD\n, xaxis=\nx2\n, yaxis=\ny2\n),\n        scatter(x=r3.year, y=r3.\u0394c\u2090, hoverinfo=\ny+name\n, line_width=3, line_color=\n#e41a1c\n, name=\nRCP3PD\n, xaxis=\nx3\n, yaxis=\ny3\n),\n        scatter(x=r3.year, y=r3.\u0394T, hoverinfo=\ny+name\n, line_width=3, line_color=\n#e41a1c\n, name=\nRCP3PD\n, xaxis=\nx4\n, yaxis=\ny4\n),\n        scatter(x=r45.year, y=r45.\u0394cM, hoverinfo=\ny+name\n, line_width=3, line_color=\n#377eb8\n, name=\nRCP45\n),\n        scatter(x=r45.year, y=r45.\u0394c\u209c, hoverinfo=\ny+name\n, line_width=3, line_color=\n#377eb8\n, name=\nRCP45\n, xaxis=\nx2\n, yaxis=\ny2\n),\n        scatter(x=r45.year, y=r45.\u0394c\u2090, hoverinfo=\ny+name\n, line_width=3, line_color=\n#377eb8\n, name=\nRCP45\n, xaxis=\nx3\n, yaxis=\ny3\n),\n        scatter(x=r45.year, y=r45.\u0394T, hoverinfo=\ny+name\n, line_width=3, line_color=\n#377eb8\n, name=\nRCP45\n, xaxis=\nx4\n, yaxis=\ny4\n),\n        scatter(x=r6.year, y=r6.\u0394cM, hoverinfo=\ny+name\n, line_width=3, line_color=\n#4daf4a\n, name=\nRCP6\n),\n        scatter(x=r6.year, y=r6.\u0394c\u209c, hoverinfo=\ny+name\n, line_width=3, line_color=\n#4daf4a\n, name=\nRCP6\n, xaxis=\nx2\n, yaxis=\ny2\n),\n        scatter(x=r6.year, y=r6.\u0394c\u2090, hoverinfo=\ny+name\n, line_width=3, line_color=\n#4daf4a\n, name=\nRCP6\n, xaxis=\nx3\n, yaxis=\ny3\n),\n        scatter(x=r6.year, y=r6.\u0394T, hoverinfo=\ny+name\n, line_width=3, line_color=\n#4daf4a\n, name=\nRCP6\n, xaxis=\nx4\n, yaxis=\ny4\n),\n        scatter(x=r85.year, y=r85.\u0394cM, hoverinfo=\ny+name\n, line_width=3, line_color=\n#984ea3\n, name=\nRCP85\n),\n        scatter(x=r85.year, y=r85.\u0394c\u209c, hoverinfo=\ny+name\n, line_width=3, line_color=\n#984ea3\n, name=\nRCP85\n, xaxis=\nx2\n, yaxis=\ny2\n),\n        scatter(x=r85.year, y=r85.\u0394c\u2090, hoverinfo=\ny+name\n, line_width=3, line_color=\n#984ea3\n, name=\nRCP85\n, xaxis=\nx3\n, yaxis=\ny3\n),\n        scatter(x=r85.year, y=r85.\u0394T, hoverinfo=\ny+name\n, line_width=3, line_color=\n#984ea3\n, name=\nRCP85\n, xaxis=\nx4\n, yaxis=\ny4\n),\n        scatter(;x=GCB[:Year], y=g.(GCB[Symbol(\nocean sink\n)]), hoverinfo=\ny+name\n, line_width=2, opacity=0.7, line_color=\ngrey\n, name=\nGlobal Ocean Sink\n),\n        scatter(;x=GCB[:Year], y=g.(GCB[Symbol(\nland sink\n)])-g.(GCB[Symbol(\nland-use change emissions\n)]), hoverinfo=\ny+name\n, line_width=2, opacity=0.7, line_color=\ngrey\n, name=\nGlobal Land Sink\n, xaxis=\nx2\n, yaxis=\ny2\n),\n        scatter(;x=GCB[:Year], y=g.(GCB[Symbol(\natmospheric growth\n)]), hoverinfo=\ny+name\n, line_width=2, opacity=0.7, line_color=\ngrey\n, name=\nAtmospheric CO\u2082\n, xaxis=\nx3\n, yaxis=\ny3\n),\n        scatter(;x=TEMP[:Year], y=TEMP[:Value]+temp_offset, hoverinfo=\ny+name\n, line_width=2, opacity=0.7, line_color=\ngrey\n, name=\nGlobal Temperature\n, xaxis=\nx4\n, yaxis=\ny4\n)\n    ],\n    Layout(\n        width=800,\n        height=600,\n        showlegend=false,\n        xaxis=attr(domain=[0.02, 0.45]),\n        yaxis=attr(domain=[0.52, 1], title=\nOcean stock\nbr\nchanges (PgC yr\nsup\n-1\n/sup\n)\n),\n        xaxis2=attr(domain=[0.55, 0.99]),\n        yaxis2=attr(domain=[0.55, 1], anchor=\nx2\n, title=\nLand stock\nbr\nchanges (PgC yr\nsup\n-1\n/sup\n)\n),\n        xaxis3=attr(domain=[0.02, 0.45], anchor=\ny3\n, title=\nYear\n),\n        yaxis3=attr(domain=[0, 0.47], anchor=\nx3\n, title=\nAtmospheric stock\nbr\nchanges (PgC yr\nsup\n-1\n/sup\n)\n),\n        xaxis4=attr(domain=[0.55, 0.99], anchor=\ny4\n, title=\nYear\n),\n        yaxis4=attr(domain=[0, 0.47], anchor=\nx2\n, title=\nTemperature Change (K)\n)\n    )\n)\n\n\n\n\n\n\n\n\n\nAcknowledging LadeGCM\n\n\nIf you use LadeGCM in your research, please reference this repository and the following article:\n\n\nLade et al., \nEarth Systems Dynamics\n \n9\n, 507\n523 (2018) \n\n\nDOI: \n10.5194/esd-9-507-2018\n\n\n@Article{esd-9-507-2018,\nAUTHOR = {Lade, S. J. and Donges, J. F. and Fetzer, I. and Anderies, J. M. and Beer, C. and Cornell, S. E. and Gasser, T. and Norberg, J. and Richardson, K. and Rockstr\\\nom, J. and Steffen, W.},\nTITLE = {Analytically tractable climate--carbon cycle feedbacks under 21st century anthropogenic forcing},\nJOURNAL = {Earth System Dynamics},\nVOLUME = {9},\nYEAR = {2018},\nNUMBER = {2},\nPAGES = {507--523},\nURL = {https://www.earth-syst-dynam.net/9/507/2018/},\nDOI = {10.5194/esd-9-507-2018}\n}\n\n\n\n\n\n\nLicense\n\n\nLicensed under the Apache License, \nVersion 2.0\n or the \nMIT license\n, at your discretion. These files may not be copied, modified, or distributed except according to those terms.", 
            "title": "Home"
        }, 
        {
            "location": "/#ladegcm-documentation", 
            "text": "", 
            "title": "LadeGCM Documentation"
        }, 
        {
            "location": "/#usage", 
            "text": "A decent example on what the package can do would be to recreate Figure 2 from  Lade  et al , which can be obtained using the package defaults.  First, we load our dependencies. Here, we import csv and xlsx file readers and a plotting library alongside our module.  using DataFrames, CSV, XLSX\nusing PlotlyJS\nusing LadeGCM  For the moment, we can use this helper function to convert  DataFrame 's  missing  to  NaN s so they can plot correctly.  g(x) = x === missing ? NaN: x;  NOTE:  in v0.7 we can use the following instead:  replace(df[col], missing= NaN)   Historical climate data used here is from  Le Qu\u00e9r\u00e9  et al . (2017) , and temperature data comes from  NOAA .  GCB = DataFrame(XLSX.readtable( Global_Carbon_Budget_2017v1.3.xlsx ,  Historical Budget , first_row=15)...);\nTEMP = CSV.read( Global_temperature_1880-2018.csv ; header=5, datarow=6);  With historical comparison data now ready, we can run our model for the four Representative Concentration Pathways. Pathway data is extant in the model already, so there is no need to source it externally.  Also, as we are replicating Figure 2 in  Lade  et al , we can use default settings.  # Generate results for all pathways\nr3 = calculate(RCP3PD);\nr45 = calculate(RCP45);\nr6 = calculate(RCP6);\nr85 = calculate(RCP85);  All results are now in and we are almost ready to plot our reconstruction of Figure 2.  The only additional thing we need to look at is the NOAA temperature. NOAA data is relative to the mean of 1901-2000, so we offset it to our mean over that period to align our datasets.  temp_offset = mean([r3.\u0394T[1901 .  r3.year .  2000]; r45.\u0394T[1901 .  r45.year .  2000]; r6.\u0394T[1901 .  r6.year .  2000]; r85.\u0394T[1901 .  r85.year .  2000]]);  Finally, we can plot everything  #I'm sure this could be cleaner...\nfig2 = plot([\n        scatter(x=r3.year, y=r3.\u0394cM, hoverinfo= y+name , line_width=3, line_color= #e41a1c , name= RCP3PD ),\n        scatter(x=r3.year, y=r3.\u0394c\u209c, hoverinfo= y+name , line_width=3, line_color= #e41a1c , name= RCP3PD , xaxis= x2 , yaxis= y2 ),\n        scatter(x=r3.year, y=r3.\u0394c\u2090, hoverinfo= y+name , line_width=3, line_color= #e41a1c , name= RCP3PD , xaxis= x3 , yaxis= y3 ),\n        scatter(x=r3.year, y=r3.\u0394T, hoverinfo= y+name , line_width=3, line_color= #e41a1c , name= RCP3PD , xaxis= x4 , yaxis= y4 ),\n        scatter(x=r45.year, y=r45.\u0394cM, hoverinfo= y+name , line_width=3, line_color= #377eb8 , name= RCP45 ),\n        scatter(x=r45.year, y=r45.\u0394c\u209c, hoverinfo= y+name , line_width=3, line_color= #377eb8 , name= RCP45 , xaxis= x2 , yaxis= y2 ),\n        scatter(x=r45.year, y=r45.\u0394c\u2090, hoverinfo= y+name , line_width=3, line_color= #377eb8 , name= RCP45 , xaxis= x3 , yaxis= y3 ),\n        scatter(x=r45.year, y=r45.\u0394T, hoverinfo= y+name , line_width=3, line_color= #377eb8 , name= RCP45 , xaxis= x4 , yaxis= y4 ),\n        scatter(x=r6.year, y=r6.\u0394cM, hoverinfo= y+name , line_width=3, line_color= #4daf4a , name= RCP6 ),\n        scatter(x=r6.year, y=r6.\u0394c\u209c, hoverinfo= y+name , line_width=3, line_color= #4daf4a , name= RCP6 , xaxis= x2 , yaxis= y2 ),\n        scatter(x=r6.year, y=r6.\u0394c\u2090, hoverinfo= y+name , line_width=3, line_color= #4daf4a , name= RCP6 , xaxis= x3 , yaxis= y3 ),\n        scatter(x=r6.year, y=r6.\u0394T, hoverinfo= y+name , line_width=3, line_color= #4daf4a , name= RCP6 , xaxis= x4 , yaxis= y4 ),\n        scatter(x=r85.year, y=r85.\u0394cM, hoverinfo= y+name , line_width=3, line_color= #984ea3 , name= RCP85 ),\n        scatter(x=r85.year, y=r85.\u0394c\u209c, hoverinfo= y+name , line_width=3, line_color= #984ea3 , name= RCP85 , xaxis= x2 , yaxis= y2 ),\n        scatter(x=r85.year, y=r85.\u0394c\u2090, hoverinfo= y+name , line_width=3, line_color= #984ea3 , name= RCP85 , xaxis= x3 , yaxis= y3 ),\n        scatter(x=r85.year, y=r85.\u0394T, hoverinfo= y+name , line_width=3, line_color= #984ea3 , name= RCP85 , xaxis= x4 , yaxis= y4 ),\n        scatter(;x=GCB[:Year], y=g.(GCB[Symbol( ocean sink )]), hoverinfo= y+name , line_width=2, opacity=0.7, line_color= grey , name= Global Ocean Sink ),\n        scatter(;x=GCB[:Year], y=g.(GCB[Symbol( land sink )])-g.(GCB[Symbol( land-use change emissions )]), hoverinfo= y+name , line_width=2, opacity=0.7, line_color= grey , name= Global Land Sink , xaxis= x2 , yaxis= y2 ),\n        scatter(;x=GCB[:Year], y=g.(GCB[Symbol( atmospheric growth )]), hoverinfo= y+name , line_width=2, opacity=0.7, line_color= grey , name= Atmospheric CO\u2082 , xaxis= x3 , yaxis= y3 ),\n        scatter(;x=TEMP[:Year], y=TEMP[:Value]+temp_offset, hoverinfo= y+name , line_width=2, opacity=0.7, line_color= grey , name= Global Temperature , xaxis= x4 , yaxis= y4 )\n    ],\n    Layout(\n        width=800,\n        height=600,\n        showlegend=false,\n        xaxis=attr(domain=[0.02, 0.45]),\n        yaxis=attr(domain=[0.52, 1], title= Ocean stock br changes (PgC yr sup -1 /sup ) ),\n        xaxis2=attr(domain=[0.55, 0.99]),\n        yaxis2=attr(domain=[0.55, 1], anchor= x2 , title= Land stock br changes (PgC yr sup -1 /sup ) ),\n        xaxis3=attr(domain=[0.02, 0.45], anchor= y3 , title= Year ),\n        yaxis3=attr(domain=[0, 0.47], anchor= x3 , title= Atmospheric stock br changes (PgC yr sup -1 /sup ) ),\n        xaxis4=attr(domain=[0.55, 0.99], anchor= y4 , title= Year ),\n        yaxis4=attr(domain=[0, 0.47], anchor= x2 , title= Temperature Change (K) )\n    )\n)", 
            "title": "Usage"
        }, 
        {
            "location": "/#acknowledging-ladegcm", 
            "text": "If you use LadeGCM in your research, please reference this repository and the following article:  Lade et al.,  Earth Systems Dynamics   9 , 507 523 (2018)   DOI:  10.5194/esd-9-507-2018  @Article{esd-9-507-2018,\nAUTHOR = {Lade, S. J. and Donges, J. F. and Fetzer, I. and Anderies, J. M. and Beer, C. and Cornell, S. E. and Gasser, T. and Norberg, J. and Richardson, K. and Rockstr\\ om, J. and Steffen, W.},\nTITLE = {Analytically tractable climate--carbon cycle feedbacks under 21st century anthropogenic forcing},\nJOURNAL = {Earth System Dynamics},\nVOLUME = {9},\nYEAR = {2018},\nNUMBER = {2},\nPAGES = {507--523},\nURL = {https://www.earth-syst-dynam.net/9/507/2018/},\nDOI = {10.5194/esd-9-507-2018}\n}", 
            "title": "Acknowledging LadeGCM"
        }, 
        {
            "location": "/#license", 
            "text": "Licensed under the Apache License,  Version 2.0  or the  MIT license , at your discretion. These files may not be copied, modified, or distributed except according to those terms.", 
            "title": "License"
        }, 
        {
            "location": "/api/", 
            "text": "API\n\n\n\n\nLadeGCM.RCP3PD\n\n\nLadeGCM.RCP45\n\n\nLadeGCM.RCP6\n\n\nLadeGCM.RCP85\n\n\nLadeGCM.Constants\n\n\nLadeGCM.Pathway\n\n\nLadeGCM.RCP3PDPathway\n\n\nLadeGCM.RCP45Pathway\n\n\nLadeGCM.RCP6Pathway\n\n\nLadeGCM.RCP85Pathway\n\n\nLadeGCM.Results\n\n\nLadeGCM.calculate\n\n\nLadeGCM.constants\n\n\nLadeGCM.generate_emission_parameters\n\n\nLadeGCM.load_pathway_data\n\n\nLadeGCM.results\n\n\n\n\n#\n\n\nLadeGCM.RCP3PD\n \n \nConstant\n.\n\n\nAlias for the \nRCP3PDPathway\n constructor.\n\n\nsource\n\n\n#\n\n\nLadeGCM.RCP45\n \n \nConstant\n.\n\n\nAlias for the \nRCP45Pathway\n constructor.\n\n\nsource\n\n\n#\n\n\nLadeGCM.RCP6\n \n \nConstant\n.\n\n\nAlias for the \nRCP6Pathway\n constructor.\n\n\nsource\n\n\n#\n\n\nLadeGCM.RCP85\n \n \nConstant\n.\n\n\nAlias for the \nRCP85Pathway\n constructor.\n\n\nsource\n\n\n#\n\n\nLadeGCM.calculate\n \n \nMethod\n.\n\n\ncalculate(rcp; [c=constants(), tspan=(1765., 2100.), solve_args...])\n\n\n\n\nEntry point to the module. Will construct all required parameters and solve the DAE.\n\n\nThe \ntspan\n here is set to mimic the Lade \net al\n. paper, but the emission parameters in each of the RCP files project out to 2500; meaning the 1765\n2500 range is valid here.\n\n\nAny flags you wish to pass to the solver can be added to the end of the call.\n\n\nExamples\n\n\nresults_6 = calculate(RCP6);\n\n\n\n\nresults_45_grid = calculate(RCP45, reltol=1e-10, abstol=1e-10, saveat=1765:0.1:2100);\n\n\n\n\nsource\n\n\n#\n\n\nLadeGCM.constants\n \n \nMethod\n.\n\n\nconstants(\nkeyword arguments\n)\n\n\n\n\nA constructor to generate all required constants for the model, any of which can be overridden via a keyword argument.\n\n\nArguments\n\n\n\n\nc\u2090\u2080::Float64=589.0\n: PgC, Pre-industrial atmospheric carbon\n\n\nc\u209c\u2080::Float64=1875.0\n: PgC, Pre-industrial soil and vegetation carbon\n\n\nc\u2098\u2080::Float64=900.0\n: PgC, Pre-industrial ocean mixed layer carbon\n\n\n\u03bb::Float64=1.8\n: K, Climate sensitivity (TCR)\n\n\n\u03c4::Float64=4.0\n: yr, Climate lag\n\n\nD::Float64=1.0\n: yr\u207b\u00b9, Atmosphere\u2013ocean mixed layer CO\u2082 equilibration rate\n\n\nr::Float64=12.5\n: Revelle (buffer) factor\n\n\nDT::Float64=0.0423\n: 4.23 % K\u207b\u00b9, Solubility temperature effect\n\n\nB\u2080::Float64=13.0\n: PgC yr\u207b\u00b9, Pre-industrial biological pump\n\n\nBT::Float64=0.032\n: 3.2 % K\u207b\u00b9, Temperature dependence of biological pump\n\n\nw\u2080::Float64=0.1\n: yr\u207b\u00b9, Solubility pump rate\n\n\nwT::Float64=0.1\n: 10 % K\u207b\u00b9, Weakening of overturning circulation with climate change\n\n\nQR::Float64=1.72\n: Terrestrial respiration temperature dependence\n\n\nNPP\u2080::Float64=55.0\n: PgC yr\u207b\u00b9, Pre-industrial NPP\n\n\nKC::Float64=0.3\n: Fertilisation effect\n\n\n\n\nExamples\n\n\nObtaining the default set of constants\n\n\njulia\n constants()\nLadeGCM.Constants(589.0, 1875.0, 900.0, 1.8, 4.0, 1.0, 12.5, 0.0423, 13.0, 0.032, 0.1, 0.1, 1.72, 55.0, 0.3)\n\n\n\n\nOverride $c_{a0}$ and $KC$ with custom values.\n\n\njulia\n constants(c\u2090\u2080=600.0, KC=0.5)\nLadeGCM.Constants(600.0, 1875.0, 900.0, 1.8, 4.0, 1.0, 12.5, 0.0423, 13.0, 0.032, 0.1, 0.1, 1.72, 55.0, 0.5)\n\n\n\n\nsource\n\n\n#\n\n\nLadeGCM.Constants\n \n \nType\n.\n\n\nHouses all constants for the model. See: \nconstants\n.\n\n\nsource\n\n\n#\n\n\nLadeGCM.Pathway\n \n \nType\n.\n\n\nRepresentation of a \nRepresentative Concentration Pathway\n.\n\n\nsource\n\n\n#\n\n\nLadeGCM.RCP3PDPathway\n \n \nType\n.\n\n\nRCP3PD Representation.\n\n\nsource\n\n\n#\n\n\nLadeGCM.RCP45Pathway\n \n \nType\n.\n\n\nRCP45 Representation.\n\n\nsource\n\n\n#\n\n\nLadeGCM.RCP6Pathway\n \n \nType\n.\n\n\nRCP6 Representation.\n\n\nsource\n\n\n#\n\n\nLadeGCM.RCP85Pathway\n \n \nType\n.\n\n\nRCP85 Representation.\n\n\nsource\n\n\n#\n\n\nLadeGCM.Results\n \n \nType\n.\n\n\nStorage for all model output. See \nresults\n.\n\n\nsource\n\n\n#\n\n\nLadeGCM.generate_emission_parameters\n \n \nMethod\n.\n\n\n(E, LUC) = generate_emission_parameters(rcp)\n\n\n\n\nFor a given concentration pathway, generate continuous functions for fossil fuel emissions \nE(t)\n and land use emissions \nLUC(t)\n.\n\n\nData comes from files on disk and is linearly interpolated to provide the continuous output.\n\n\nsource\n\n\n#\n\n\nLadeGCM.load_pathway_data\n \n \nMethod\n.\n\n\nload_pathway_data(rcp)\n\n\n\n\nLoads csv file for a given RCP scenario into a dataframe for processing. The information in these files comes from \nMeinshausen et al. (2011)\n, which were generated using MAGICC6.\n\n\nsource\n\n\n#\n\n\nLadeGCM.results\n \n \nMethod\n.\n\n\nresults(sol, c)\n\n\n\n\nCollects all required outputs from the DAE solution.\n\n\nsource", 
            "title": "API"
        }, 
        {
            "location": "/api/#api", 
            "text": "LadeGCM.RCP3PD  LadeGCM.RCP45  LadeGCM.RCP6  LadeGCM.RCP85  LadeGCM.Constants  LadeGCM.Pathway  LadeGCM.RCP3PDPathway  LadeGCM.RCP45Pathway  LadeGCM.RCP6Pathway  LadeGCM.RCP85Pathway  LadeGCM.Results  LadeGCM.calculate  LadeGCM.constants  LadeGCM.generate_emission_parameters  LadeGCM.load_pathway_data  LadeGCM.results   #  LadeGCM.RCP3PD     Constant .  Alias for the  RCP3PDPathway  constructor.  source  #  LadeGCM.RCP45     Constant .  Alias for the  RCP45Pathway  constructor.  source  #  LadeGCM.RCP6     Constant .  Alias for the  RCP6Pathway  constructor.  source  #  LadeGCM.RCP85     Constant .  Alias for the  RCP85Pathway  constructor.  source  #  LadeGCM.calculate     Method .  calculate(rcp; [c=constants(), tspan=(1765., 2100.), solve_args...])  Entry point to the module. Will construct all required parameters and solve the DAE.  The  tspan  here is set to mimic the Lade  et al . paper, but the emission parameters in each of the RCP files project out to 2500; meaning the 1765 2500 range is valid here.  Any flags you wish to pass to the solver can be added to the end of the call.  Examples  results_6 = calculate(RCP6);  results_45_grid = calculate(RCP45, reltol=1e-10, abstol=1e-10, saveat=1765:0.1:2100);  source  #  LadeGCM.constants     Method .  constants( keyword arguments )  A constructor to generate all required constants for the model, any of which can be overridden via a keyword argument.  Arguments   c\u2090\u2080::Float64=589.0 : PgC, Pre-industrial atmospheric carbon  c\u209c\u2080::Float64=1875.0 : PgC, Pre-industrial soil and vegetation carbon  c\u2098\u2080::Float64=900.0 : PgC, Pre-industrial ocean mixed layer carbon  \u03bb::Float64=1.8 : K, Climate sensitivity (TCR)  \u03c4::Float64=4.0 : yr, Climate lag  D::Float64=1.0 : yr\u207b\u00b9, Atmosphere\u2013ocean mixed layer CO\u2082 equilibration rate  r::Float64=12.5 : Revelle (buffer) factor  DT::Float64=0.0423 : 4.23 % K\u207b\u00b9, Solubility temperature effect  B\u2080::Float64=13.0 : PgC yr\u207b\u00b9, Pre-industrial biological pump  BT::Float64=0.032 : 3.2 % K\u207b\u00b9, Temperature dependence of biological pump  w\u2080::Float64=0.1 : yr\u207b\u00b9, Solubility pump rate  wT::Float64=0.1 : 10 % K\u207b\u00b9, Weakening of overturning circulation with climate change  QR::Float64=1.72 : Terrestrial respiration temperature dependence  NPP\u2080::Float64=55.0 : PgC yr\u207b\u00b9, Pre-industrial NPP  KC::Float64=0.3 : Fertilisation effect   Examples  Obtaining the default set of constants  julia  constants()\nLadeGCM.Constants(589.0, 1875.0, 900.0, 1.8, 4.0, 1.0, 12.5, 0.0423, 13.0, 0.032, 0.1, 0.1, 1.72, 55.0, 0.3)  Override $c_{a0}$ and $KC$ with custom values.  julia  constants(c\u2090\u2080=600.0, KC=0.5)\nLadeGCM.Constants(600.0, 1875.0, 900.0, 1.8, 4.0, 1.0, 12.5, 0.0423, 13.0, 0.032, 0.1, 0.1, 1.72, 55.0, 0.5)  source  #  LadeGCM.Constants     Type .  Houses all constants for the model. See:  constants .  source  #  LadeGCM.Pathway     Type .  Representation of a  Representative Concentration Pathway .  source  #  LadeGCM.RCP3PDPathway     Type .  RCP3PD Representation.  source  #  LadeGCM.RCP45Pathway     Type .  RCP45 Representation.  source  #  LadeGCM.RCP6Pathway     Type .  RCP6 Representation.  source  #  LadeGCM.RCP85Pathway     Type .  RCP85 Representation.  source  #  LadeGCM.Results     Type .  Storage for all model output. See  results .  source  #  LadeGCM.generate_emission_parameters     Method .  (E, LUC) = generate_emission_parameters(rcp)  For a given concentration pathway, generate continuous functions for fossil fuel emissions  E(t)  and land use emissions  LUC(t) .  Data comes from files on disk and is linearly interpolated to provide the continuous output.  source  #  LadeGCM.load_pathway_data     Method .  load_pathway_data(rcp)  Loads csv file for a given RCP scenario into a dataframe for processing. The information in these files comes from  Meinshausen et al. (2011) , which were generated using MAGICC6.  source  #  LadeGCM.results     Method .  results(sol, c)  Collects all required outputs from the DAE solution.  source", 
            "title": "API"
        }
    ]
}